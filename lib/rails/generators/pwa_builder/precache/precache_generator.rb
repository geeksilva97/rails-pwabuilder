require "rails/generators"
require_relative "../../../../rails_sw_builder/find_service_worker"

module PwaBuilder
  module Generators
    class PrecacheGenerator < Rails::Generators::Base
      source_root File.expand_path("templates", __dir__)
      argument :route, type: :string, required: true, desc: "Route to precache (e.g., '/some-route')"

      def precache
        service_worker_path = PwaBuilder::Services::FindServiceWorker.call

        if File.exist?(service_worker_path)
          content = File.read(service_worker_path)

          if has_precache_call?(content)
            append_to_precache_array(content, service_worker_path)
          else
            add_initial_precache_call(content, service_worker_path)
          end

          say_status "updated", "Added '#{route}' to precache routes", :green
        else
          say_status "error", "Service worker file not found at #{service_worker_path}. Please create one at app/views/pwa/service-worker.js", :red
        end
      end

      private

      def has_precache_call?(content)
        content.match?(/precacheAndRoute\s*\(\s*\[/)
      end

      def append_to_precache_array(content, file_path)
        # Check if route already exists
        if route_already_exists?(content)
          say_status "skip", "Route '#{route}' already exists in precache", :yellow
          return
        end

        new_route_entry = "  {url: '#{route}', revision: null},"

        updated_content = content.gsub(
          /(precacheAndRoute\s*\(\s*\[\s*)(.*?)(\s*\]\s*\);)/m
        ) do |match|
          opening = $1
          existing_routes = $2.strip
          closing = $3

          # Handle empty array case
          if existing_routes.empty?
            "#{opening}\n#{new_route_entry}\n#{closing}"
          else
            # Add comma if the last entry doesn't have one
            existing_routes += "," unless existing_routes.end_with?(",")
            "#{opening}#{existing_routes}\n#{new_route_entry}\n#{closing}"
          end
        end

        File.write(file_path, updated_content)
      end

      def route_already_exists?(content)
        content.match?(/\{\s*url:\s*['"]#{Regexp.escape(route)}['"]/)
      end

      def add_initial_precache_call(content, file_path)
        precache_code = <<~JS
      const { precacheAndRoute } = workbox.precaching;

      precacheAndRoute([
        {url: '#{route}', revision: null},
      ]);
        JS

        # Try to add after workbox imports, or at the end if no imports found
        if content.match?(/(import.*workbox.*;\s*\n)/m)
          # Add after the last workbox import
          updated_content = content.sub(
            /((?:import.*workbox.*;\s*\n)+)/m,
            "\\1#{precache_code}\n"
          )
        elsif content.match?(/(importScripts.*workbox.*;\s*\n)/m)
          # Add after importScripts
          updated_content = content.sub(
            /(importScripts.*workbox.*;\s*\n)/m,
            "\\1#{precache_code}\n"
          )
        else
          # Add at the end
          updated_content = content + precache_code
        end

        File.write(file_path, updated_content)
      end

      def initial_service_worker_content
        <<~JS
      // Service Worker generated by Rails
      import { precacheAndRoute } from 'workbox-precaching';

      precacheAndRoute([
        {url: '#{route}', revision: null},
      ]);
        JS
      end
    end
  end
end
